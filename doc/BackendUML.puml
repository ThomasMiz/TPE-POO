@startuml

interface Drawable{
+void draw(GraphicsContext gc)
}

interface Colorable{
+void setBorderSize(double size)
+void setBorderColor(Color color)
+void setFillColor(Color color)
+default void setColorableProperties(double borderSize, Color borderColor, Color fillColor)
}

interface Movable{
+void move(double deltaX, double deltaY)
}

Drawable -[hidden] Colorable
Colorable -[hidden] Movable

abstract class Figure{
-Point[] points
-double borderSize
-Color borderColor
-Color fillColor

#Figure(Point[] points)
+void setBorderSize(double borderSize)
+double getBorderSize()
+void setBorderColor(Color borderColor)
+Color getBorderColor()
+void setFillColor(Color fillColor)
+Color getFillColor()
+void move(double deltaX, double deltaY)
+void draw(GraphicsContext gc)
{abstract}+boolean contains(Point point)
{abstract}+boolean isContainedIn(Rectangle rectangle)
}
Figure .up.|> Drawable
Figure .up.|> Colorable
Figure .up.|> Movable

Figure *-up- Point

class CanvasState{
-List<Figure> list
+void addFigure(Figure figure)
+boolean removeFigures(Collection<Figure> figures)
+void sendToTop(Collection<Figure> figures)
+void sendToBottom(Collection<Figure> figures)
+Figure getFigureAt(Point point)
+int getFiguresOnRectangle(Rectangle rectangle, Collection<Figure> result)
+Iterator<Figure> iterator()
+void clear()
}

CanvasState *-left- Figure

class Circle{
+Circle(Point center, double radius)
+double getRadius()
+String toString()
}

class Ellipse{
-Point center
-double radiusX
-double radiusY

+Ellipse(Point center, double radiusX, double radiusY)
+Point getCenter()
+double getRadiusX()
+double getRadiusY()
+boolean contains(Point point)
+boolean isContainedIn(Rectangle rectangle)
+void draw(GraphicsContext gc)
+String toString()
}

class Line{
-Point from
-Point to

+Line(Point from, Point to)
+Point getFrom()
+Point getTo()
+boolean contains(Point point)
+boolean isContainedIn(Rectangle rectangle)
+void draw(GraphicsContext gc)
+String toString()
}

class Point{
-double x
-double y

+double distanceSquaredTo(Point other)
+double distanceTo(Point other)
+void move(double deltaX, double deltaY)
+boolean equals()
+String toString()
}

class Point implements Movable

class Rectangle{
-Point topLeft
-Point bottomRight

+Rectangle(Point topLeft, Point bottomRight)
+Point getTopLeft()
+Point getBottomRight()
+double width()
+double height()
+boolean contains(Point point)
+boolean contains(Rectangle other)
+boolean isContainedIn(Rectangle rectangle)
+void draw(GraphicsContext gc)
+String toString()
}

class Square{
+Square(Point topLeft, Point bottomRight)
+String toString()
}

class Circle extends Ellipse
class Ellipse extends Figure
class Rectangle extends Figure
class Square extends Rectangle
class Line extends Figure

note top of CanvasState
This class implements Iterable<Figure>
end note
@enduml